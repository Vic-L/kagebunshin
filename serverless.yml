custom: 
  service: ${file(env.yml):service}
  provider: ${file(env.yml):provider}
  s3: ${file(env.yml):s3}
  serverless-offline:
    port: 8000

service: ${self:custom.service}

frameworkVersion: ">=1.23.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  region: ${self:custom.provider.region}
  memorySize: ${self:custom.provider.memorySize}
  profile: ${self:custom.provider.awsProfile} # aws named profile
  stage: ${opt:stage, 'dev'} # `sls deploy --stage production` if --stage is provided, else use dev
  stackTags: # Optional CF stack tags
    Name: ${self:custom.provider.awsTagName}
  timeout: ${self:custom.provider.timeout}
  environment:
    DST_BUCKET_NAME: ${self:custom.s3.${opt:stage, 'dev'}DstBucketName}
    SRC_BUCKET_NAME: ${self:custom.s3.${opt:stage, 'dev'}SrcBucketName}
    S3_ACCESS_KEY_ID: ${self:custom.s3.${opt:stage, 'dev'}AccessKeyId}
    S3_SECRET_ACCESS_KEY: ${self:custom.s3.${opt:stage, 'dev'}SecretAccessKey}

functions:
  onUpload:
    handler: handler.onUpload
    tags:
      Name: ${self:custom.provider.awsTagName}
    ## only use events for testing on dev and local
    ## in production this lambda should be used as a event listener on S3 bucket
    # events:
    #   - http:
    #       path: '/onUpload'
    #       method: post
    #       cors: true

plugins:
  - serverless-offline
